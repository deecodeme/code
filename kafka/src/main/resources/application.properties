kafka.producer.bootstrap.servers=localhost:9092
kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
kafka.producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Logical identifier of the Application,a meaningful to be used to be helpful in debugging like the service name
kafka.producer.client.id=test-servicekafka.producer

# Ack
# acks required from partition leader and replicas. '0' being no ack, '1' being leader ack and 'all' being the ack from leader+replicas
# producer latency will be higher with more reliable acks. However, end-to-end latency will not differ as,
# Kafka makes the message available to consumers only if the message is replicated to all in sync replicas
kafka.producer.acks=all

# Message Delivery Time
# time taken to send() + time to get callback()
# max.block.ms is to specify, how long a producer may block when calling send(), this is where Producer adds the record to a batch of the partition
# A timeout exception is thrown if time exceeds
kafka.producer.max.block.ms=

# To limit the amount of time spent from the point a record was added into a batch and until the broker responds or client gives up including retries.
# Callback will be called with either a timeout exception or exception with error from broker before retrying.
# An ideal value would be 120,000 which can cover for leader election which takes around 30 seconds to complete.
# Broker can do any number of retries during that time.
# this time should be greater than linger.ms + retry.backoff.ms + request.timeout.ms as this includes for all.
# It is recommended to use delivery.timeout.ms to control the overall timeout.
# It is also a good practice to test leader re-election time on your broker setup and set this value to not give up early.
# kafka.producer.delivery.timeout.ms=

# timeout to wait for a response from server. On Timeout, Producer may retry or callback with TimeoutException
# kafka.producer.request.timeout.ms=

# Producer's back off time between two retries, default 100 ms
# kafka.producer.retry.backoff.ms=

# time to wait for the batch to be sent to the server. KafkaProduce sebd the batch if the current batch is full or time exceeds linger.ms.
# By default, Kafka sends the current batch as soon as the sender thread is free.
# Setting linger.ms to greater than 0, increases throughput significantly with little increase in latency.
kafka.producer.linger.ms=10

# limit the number of retries to. Set the value to 0 to disable retries completely
# kafka.producer.retry=

#
kafka.producer.buffer.memory



